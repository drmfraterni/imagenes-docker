CURSO DE GIT

HERRAMIENTAS NECESARIAS.

1) En cualquiera de los casos, estemos con linux, Mac o Windows tenemos que ir a la página de Git git.scm.com y descargar la herramienta de git.
2) La instalación para Linux y Mac es automática.
3) Para Windows cambia un poco. Nos bajamos la versión pertinente.

COMANDOS BÁSICOS DE GIT.

$ git init    // Iniciar un git
$ git config --global user nombreUsuario
$ git config --global email nombreUsuario@gmail.com
$ git add
$ git add -A
$ git add -- .
$ git add archivo.html

$ git commit -m "Mensaje para subir"
$ git commit -am "Actualiza el commit y sube el mensaje"
$ git commit -am "Readme actualz" // escribimos mal el commit
$ git commit --amend -m "Actualizamos el readme" // aquí enmendamos el error con --amend

$ git status  //nos muestra la lista de archivos que han cambiado el estado desde la última vez revisado
$ git status -s

$ git log
$ git log --oneline --decorate --all --graph

$ git reset --soft HEAD^  // recuperar lo anterior a head
$ git reset --soft 1156084 // recuperar una versión que queramos


$ git branch  // sirve para ver todas las ramas que tenemos
$ git branch nombre-de-rama  // sirve para crear una rama 
$ git branch -d nombre de la rama // sirve para borrar una o varias ramas

$ git merge rama-fusionar
$ git diff 
$ git diff rama-villanos master  // ver diferencias entre ramas

$ git checkout --.  // recuperamos todo lo último que hemos realizado

//cambios temporales----------
$git stash // guardamos de forma temporal ciertos cambios que teníamos
$git stash pop // recuperar los cambios que tenemos en el stash para el master
$git stash list // listamos todas las entradas en el stash
$git stash drop // forzamos a borrar el listado de stash.
	

PRIMEROS COMANDOS.

1) abrimos la ventana de git bash e introducimos los siguientes comandos.

	- versión de git: git --version
	- ayuda de git: git help
	- ayuda de un comando enconcreto: $ git help commit
2) Configuración globales de git.
	
	$ git config --global user.name "robledomorante"
	$ git config --global user.email "drmfraterni@gmail.com"
3) Ver las configuraciones globales.
	$ git config --global -e
	RESULTADO:

	[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

	[user]
	name = robledomorante
	email = drmfraterni@gmail.com
	mail = drmfraterni@gmail.com

INICIAR UN REPOSITORIO.

1) creamos un directorio por ejemplo demo-01
2) Nos metemos dentro del directorio con la consola de git.
3) Una vez que estamos dentro ejecutamos el siguiente comando $ git init
4) A partir de ahí tenemos una carpeta invisible que .git que controlará el repositorio.
5) Para ver el directorio podemos utilizar el comamndo $ git --status
6) nos aparece el$ git status

	On branch master

	No commits yet

	Untracked files:
  	(use "git add <file>..." to include in what will be committed)
        	apple-touch-icon.png
        	browserconfig.xml
	        css/
        	favicon.ico
        	fonts/
        	index.html
        	js/
        	tile-wide.png
        	tile.png

	nothing added to commit but untracked files present (use "git add" to track)
directorio en rojo con los archivos indicando que no los tenemos registrados en el sistema de git.

7) Ahora decimos a git que queremos añadir esos archivos a su control para observar los cambios.
	$ git add -- .  // para añadir todo los archivos.
	$ git -A
	$ git directorio/*
	$ git add index.html  // para añadir un archivo en concreto.

8) Añade todos los archivos al control y lo vemos a través del comando:
	$ git status
	
9) Ahora vamos hacer un snashop de proyecto que estamos creando, una fotografía para ello ponemos el siguiente comando:
	$ git commit -m "primer commit"
10) En caso que ahora cambie alguno de los archivos o los borre puedo recuperarlo con git a través del siguiente comando:
	$ git checkout --.
Recuperamos todo.

VER TODOS LOS COMMIT.

1) Para ver el historial de commit que tenemos y poder volver alguno de ellos tenemos que ejecutar el siguiente comando:
	$ git log

TRABAJANDO CON NUESTRO PROYECTO LOCAL.

1) Podemos añadir los archivos de una extensión nuestro proyecto
	$ git add *.png
2) Podemos añadir todo un directorio
	$ git add css/
3) Podemos añadir todos los archivos y luego excluir alguno que no nos interese por ejemplo excluimos los XML.
	$ git add -A
	$ git reset *.xml   // excluimos del listado añadido los xml. 
4) Otros comandos para añadir

	$ git add "*.txt" // Agrega todos los txt del todo el proyecto
	$ git add *.txt   // Agrega todos los txt en el directorio actual
	$ git add --all   // Agrega toos los archivos
	$ git add <lista de archivos> // Agrega los archivos que listemos 
	$ git add index.html configuracion.php
	$ git add pdfs/*.pdf  // Agrega todos los PDFs dentro de la carpeta PDFs
	$ git add pdfs/   // Agrega todos los archivos dentro de la carpeta PDFs

DISTINTOS COMANDOS DE GIT LOG

1) Podemos introducir distintos parámetros para el comando log, así nos mostrará la información de distinta manera, sobre todo más completa.
	
	$ git log --oneline   // vemos los datos más completos

	$ git log   // comando log sin parámetros.
	
	
	$ git log --oneline
	
		19fa9e8 (HEAD -> master) incorporamos el archivo browserconfig.xml
		0428311 todos los archivos de javascript y fuenres
		e3544e1 Hemos añadido todos los CSS
		7234388 todos los archivos de imagen png
		76fa87d primer archivo añadido index

	$ git log --oneline --decorate --all --graph
		* 19fa9e8 (HEAD -> master) incorporamos el archivo browserconfig.xml
		* 0428311 todos los archivos de javascript y fuenres
		* e3544e1 Hemos añadido todos los CSS
		* 7234388 todos los archivos de imagen png
		* 76fa87d primer archivo añadido index
	$ git status -s    // silence. Tenemos menos información, sólo los archivos modificados

ALIAS
1) Podemos crear Alias para acortar aquellos comandos que vayan con muchos parámetros, por ejemplo:
	$ git config --global alias.lg "log --oneline --decorate --all --graph"
2) Ahora cuando ejecutemos el comando git log podemos utiliza el Alias que hemos creado.
	$ git lg

	* 81e41d7 (HEAD -> master) subida del index.html
	* 02166ca subida del main css
	* 19fa9e8 incorporamos el archivo browserconfig.xml
	* 0428311 todos los archivos de javascript y fuenres
	* e3544e1 Hemos añadido todos los CSS
	* 7234388 todos los archivos de imagen png
	* 76fa87d primer archivo añadido index

TRABAJAR CON LOS COMMIT.

$ git commit -am "Readme actualz" // escribimos mal el commit
$ git commit --amend -m "Actualizamos el readme" // aquí enmendamos el error con --amend
// se nos olvida alguna modificación sobre el archivo que realizamos y lo queremos introducir en el último commit.
$ git reset --soft HEAD^
$ git commit -am "actualizamos el readme con todos los archivos a amitir"

$ git reset --soft HEAD^



	$ git config --global alias.s "status -s -b"
Ahora en vez de git status -s -b solo tendremos que poner $ git s

TRABAJAMOS CON LA HITORIA DE GIT

Tenemos varios puntos creados por los commit.

	$ git lg
	* 5692b54 (HEAD -> master) se agregó la carpeta HISTORIAS de heroes
	* 7e91cb8 Se agregó el archivo de CIUDADES
	* 1156084 Se agregó el archivo de HEROES
	* d7d5e76 Se agregó el archivo MISIONES
	* bde7315 Se agrego el archivo readme

Hemos realizado varias modificaciones y queremos volve a algún punto de la historia pero sin quitar los cambios realizados en los archivos.

$ git reset --soft 1156084 

Si lo que queremos hacer es quitar todos los cambios realizados lo que hacemos y volver a algún punto de la historia ejecutamos el siguiente comando.

$ git reset --hard 1156084

Si hemos borrado todo y resulta que lo tenemos que recupear, si hacemos $ git lg vemos que no aparece. Tenemos que ejecurar el siguiente comando $ git reflog

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git reflog
d7d5e76 (HEAD -> master) HEAD@{0}: reset: moving to d7d5e76
5692b54 HEAD@{1}: reset: moving to 5692b54
5692b54 HEAD@{2}: reset: moving to 5692b54
d9990af HEAD@{3}: commit: Agregamos a linterna verde y Robin
b4a7b66 HEAD@{4}: reset: moving to b4a7b66
40ff9ab HEAD@{5}: commit: modificación del heroes


Nos aparece todo en registro, todo lo que hemos realizado y por lo tanto podremos ir al momento de la histroa que queramos. En este caso vamos al periodo - d9990af  - Agregamos a linterna verde y Robin.

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git reset --hard d9990af
HEAD is now at d9990af Agregamos a linterna verde y Robin

Ahora si vamos a nuestro registro, podemos observar que hemos recuperado todo los pasos hasta el punto que le hemos indicado.
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git lg
* d9990af (HEAD -> master) Agregamos a linterna verde y Robin
* b4a7b66 Editamos el README.md
* 5692b54 se agregó la carpeta HISTORIAS de heroes
* 7e91cb8 Se agregó el archivo de CIUDADES
* 1156084 Se agregó el archivo de HEROES
* d7d5e76 Se agregó el archivo MISIONES
* bde7315 Se agrego el archivo readme

CAMBIAR NOMBRE A UN ARCHIVO Y ELIMINAR ARCHIVOS.
$ git mv  // Comando para cambiar el nombre del archivo.
	$ git mv destruir-mundo.txt salvar-mundo.txt
$ git rm // Comando para eliminar un archivo.
$ git commit -m "Eliminar archivo" // confirmamos su eliminación y por lo tanto el registro.
	$ git rm salvar-mundo.txt

$ git lg
* 0c7b2c3 (HEAD -> master) borrar archivo salvar mundo
* 9d6f3b9 renombrar archivo a salvar-mundo.txt
* 1a62b3a Como destruir el mundo
* d9990af Agregamos a linterna verde y Robin
* b4a7b66 Editamos el README.md
* 5692b54 se agregó la carpeta HISTORIAS de heroes
* 7e91cb8 Se agregó el archivo de CIUDADES
* 1156084 Se agregó el archivo de HEROES
* d7d5e76 Se agregó el archivo MISIONES
* bde7315 Se agrego el archivo readme

CAMBIAR Y ELIMINAR ARCHIVOS.

1) Cambiamos el nombre de un archivo dentro del directorio de manera manual, por ejemplo tenemos el archivo batman.historia.md y lo renombramos a batman.md.

2) Comenzamos para ver como queda nuestros archivos con el comando $ git status - git s
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
 D historia/batman.historia.md
?? historia/batman.md
Nos reconoce como un archivo eliminado y como otro archivo renombrado aunque realmente sea el mismo archivo.

3) Ahora para actulizar el stage lo que hacemos es que ejecutamos el siguiente comando $ git add -u
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git add -u

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
D  historia/batman.historia.md
?? historia/batman.md
Ahora incorporamos el archivo al stage como siempre con $git add -A o con $git add -- .
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git add -A
4) ahora hacemos un $ git status o $ git s para ver el estado que está el archivo y automáticamente nos reconoce que ese archivo ha sido renombrado.
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (Amaster)
$ git s
## master
R  historia/batman.historia.md -> historia/batman.md

5) Ahora lo subimos como siempre con commit y luego vemos el registro con log
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git commit -m "cambio de nombre de la historia de batman"
[master 3074efa] cambio de nombre de la historia de batman
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename historia/{batman.historia.md => batman.md} (100%)

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git lg
* 3074efa (HEAD -> master) cambio de nombre de la historia de batman
* 0c7b2c3 borrar archivo salvar mundo
* 9d6f3b9 renombrar archivo a salvar-mundo.txt
* 1a62b3a Como destruir el mundo
* d9990af Agregamos a linterna verde y Robin

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
 D historia/superman.historia.md

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git add -u

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
D  historia/superman.historia.md

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git commit -m "borramos la historia de superman"
[master 74e187b] borramos la historia de superman
 1 file changed, 7 deletions(-)
 delete mode 100644 historia/superman.historia.md

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git lg
* 74e187b (HEAD -> master) borramos la historia de superman
* 3074efa cambio de nombre de la historia de batman
* 0c7b2c3 borrar archivo salvar mundo
* 9d6f3b9 renombrar archivo a salvar-mundo.txt
* 1a62b3a Como destruir el mundo

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$

6) ELIMINAMOS UN ARCHIVO.

Vemos como está el stage con $ git status o $ git s
Como podemos ver nos aparece el archivo de superman.historia.md eliminado

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
 D historia/superman.historia.md

7) Actualizamos el escenario o el stage con el comando $ git add -u
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git add -u

8) Vemos el estado de stage con $ git status o $ git s
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git s
## master
D  historia/superman.historia.md

9) Lo incorporamos los cambios a stage con $ git commit -m "Eliminación del archivo de superman"
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git commit -m "borramos la historia de superman"
[master 74e187b] borramos la historia de superman
 1 file changed, 7 deletions(-)
 delete mode 100644 historia/superman.historia.md

10) Vemos el registro de cambios.
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$ git lg
* 74e187b (HEAD -> master) borramos la historia de superman
* 3074efa cambio de nombre de la historia de batman
* 0c7b2c3 borrar archivo salvar mundo
* 9d6f3b9 renombrar archivo a salvar-mundo.txt
* 1a62b3a Como destruir el mundo

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-4 (master)
$

CREAR UNA RAMA NUEVA.
1) Crear una nueva rama
$ git branch rama-nueva01

2) Ver las ramas y sobre la que estamos trabajando
$ git branch

3) Cambiar de rama:
	$ git checkout rama-villanos
	$ git switch rama-villanos
4) Ahora tenemos dos ramas con distintos archivos, una es MASTER y otra RAMA-VILLANOS. Para ver las diferencias entre ambas ramas ejecutamos el siguiente comando:
$ git diff rama-villanos master
Nos muestras las diferencias entre ambas ramas.

5) Para FUSIONAR ambas ramas tengo que hacer un MERGE y para ello nos tenemos que ir sobre la rama principal y fusionar la otra, por lo tanto me voy a master y fusiona la rama-villanos.

$ git merge rama-villanos

6) Ahora la rama villanos no tiene mucho sentido ya que está integrado en la master y es mejor borrarla.
Para ello ejecutamos el siguiente comando.

$ git branch -d rama-villanos (d->delete)

$ git branch -d rama-villanos
Deleted branch rama-villanos (was 8c5044c).

CREAR Y CAMBIAR A ESA RAMA NUEVA AUTOMÁTICAMENTE.

1) Creamos la rama villano y además nos movemos a ella saliendo de la rama master automáticamente
	$ git checkout -b rama-villano
2) Ejemplo de creación de nueva rama y como nos hemos movida a ella.
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-06 (rama-villano)
$ git branch
  master
* rama-villano

TIPOS DE MERGE CON GIT PARA UNIR RAMAS.

Tenemos tres tipo de merge que podemos hacer con git dependiendo de la situación de los archivos.

	Merge: Fast-Forward.
	Merge: Unión automática.
	Merge: Uniones con conflictos que nos va a pedir git que intervengamos para solventar esos conflictos.

ELIMINAR VARIAS RAMAS
general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-06 (master)
$ git branch
* master
  rama-conflicto
  rama-villano

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-06 (master)
$ git branch -d rama-conflicto rama-villano
Deleted branch rama-conflicto (was 3fc486a).
Deleted branch rama-villano (was 3b09e85).

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-06 (master)
$ git branch
* master

general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-06 (master)
$

CREACIÓN DE TAGS

1) Creamos un tag con el siguiente comando:
	$ git tag superRelease
2) Borrar un tag con el siguiente comando:
	$ git tag -d superRelease
3) Crear un tag con comentario:
	$ git tag -a v1.0.0 -m "Versión 1.0.0"
4) Crear un tag en alguna de las versiones. Copiamos el número de versión
	* c9ee153 Renombrando archivo a salvar-mundo
	* fa3cd3a Creando el archivo destruir el mundo
	* 4e809d4 Agregamos a Linterna verde y a Robin
	* 345d7de Editamos el readme.md
	* 860c6c2 Agregamos las historias de los heroes
	* bc1a1e5 Agregamos las ciudades

	$ git tag -a v0.1.0 345d7de -m "Versión alfa"
	* 345d7de (tag: v0.1.0) Editamos el readme.md
5) Ver la información de un tag
	$ git show v1.0.0

STASH

Se utiliza para dejar abandonado de forma temporal una linea y conservan los cambios que se hicieron.

1) El comando para ejecutar stash es $git stash

Nos aparece en el registro como Working in progress (WIP)

$ git lg
* 7c79391 (HEAD -> master) modificaciones en el readme de emergencia
| * 7dffab3 (refs/stash) WIP on master: 5440fe5 Resolviendo conflictos
|/|
| * d9cca1a index on master: 5440fe5 Resolviendo conflictos
|/
*   5440fe5 (tag: v1.0.0) Resolviendo conflictos
|\
| * 52c9666 Modificamos las misiones
* | b936625 Actualizamos las misiones MASTER
|/
*   a4a9834 Merge branch 'rama-villano'
|\
| * b3e02bc Agregamos a doomsday
* | 4c24baa Borre a los heroes que no son de DC
|/
* ad66a33 Agregamos al flash reverso
* df6ed62 Agregando villanos

2) Para retomar ese trabajo temporal y que vuelva a parecernos en MASTER lo que hacemos es que quitamos el stash ejecutando el siguiente comando:
$ git stash pop

La rama de stash desaparece.

3) Si hay conflicto hay que hacer $git stash drop

4) Si hacemos varios entradas al stash podemos ver la lista porsterimente ejecutando el comando:
	$ git stash list

5) Si tenemos varias entradas en el stash y queremos recuperar una en concreto lo que ponemos hacer es recuperarlo con el id del stash con el siguiente comando.

	$git stash apply stash@{id}
6) si queremos borrar la última entrada recuperada.
	$git stash drop stash@{id}
7) Keep index
	Guarda todo menos los archivos en el stage o en el escenario
	$ git stash save --keep-index
8) include-untracked
	Incluye todos los archivos, junto a los que git no le da seguimiento.
	$ git stash save --include-untracked
9) ver información del stash
	$git show stash
	$git show stash@{id}
10) Borrar todas las entradas sin preguntar y sin posibilidad de recuperar. 
	$git stash clear
11) Cuando hacemos un stash si queremos dejar mayor información sobre lo que estamos haciendo utilizamos el comando:
	& git stash save "Agregamos el comentario"

GITHUB

NUEVO PROYECTO EN GITHUB

CONECTAR GIT CON GITHUB

1) Creamos un nuevo proyecto en github
2) En la documentación que nos proporciona vemos como conectar en remoto

	…or push an existing repository from the command line

	git remote add origin https://github.com/drmfraterni/udemy-heroes.git
	git push -u origin master

2) Vemos que estamos bien conectados en git
	general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-09 (master)
	$ git remote
	origin
3) Conectamos con github y subimos el proyecto
	general@LAPTOP-TQ55EANN MINGW64 ~/Desktop/curso/demo-09 (master)
	$ git push -u origin master
	USUARIO: nombreUsuairo
	CONTRASEÑA: lacontrasenia

SUBIR TAGS

1) Recordemos que los tags son como marcas que creamos nosotros en un momento determinado indicando la versión del proyecto, cuando ya hemos cumplido nuestros objetivos.

2) En Github no sube automáticamente los tags, lo tenemos que hacer de manera manual.

3) Primero vemos que tags
	$ git tag
		v0.1.0
		v1.0.0
		v2.0.0

4) Luego subimos todos los tags a github
	$git push --tags

	Enumerating objects: 3, done.
	Counting objects: 100% (3/3), done.
	Delta compression using up to 4 threads
	Compressing objects: 100% (3/3), done.
	Writing objects: 100% (3/3), 456 bytes | 228.00 KiB/s, done.
	Total 3 (delta 0), reused 0 (delta 0)
	To https://github.com/drmfraterni/udemy-heroes.git
 	* [new tag]         v0.1.0 -> v0.1.0
 	* [new tag]         v1.0.0 -> v1.0.0
 	* [new tag]         v2.0.0 -> v2.0.0


BAJAR MODIFICACIONES DE GITHUB

1) Para bajar una modificación de github tenemos que ejecutar el siguiente comando.

	$ git pull

CLONAR PROYECTO DE GITHUB 
	$ git clone https://github.com/drmfraterni/udemy-heroes.git demo-10
si ponemos demo 10 se nos baja con ese nombre.

ACTUALIZAR NUESTRO ARCHIVOS CON RESPECTO AL REMOTO GITHUB

	$ git status
	$ git fetch
	$ git pull





 
