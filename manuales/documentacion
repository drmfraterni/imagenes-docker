****************************************
INSTALAR SERVIDOR WEB APACHE UBUNTU
****************************************
https://www.digitalocean.com/community/tutorials/how-to-install-the-apache-web-server-on-ubuntu-20-04-es
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-18-04-quickstart-es

1. PASO INSTALAR APACHE

Acutalizamos los repositorios locales de Ubuntu

$ sudo apt update
 
A continuación, instale el paquete apache2:

$ sudo apt install apache2

2. PASO AJUSTAR EL FIREWALL

$ sudo ufw app list
$ sudo ufw allow 'Apache'
$ sudo ufw status

3. PASO 3.

$ sudo systemctl status apache2 // ver el estado del servidor Apache
$ hostname -I  //obtener direcciones separadas por espacios
$ curl -4 icanhazip.com // Obtener la dirección pública

4. PASO ADMINISTRAR EL PROCESO DE APACHE


sudo systemctl stop apache2
 
sudo systemctl start apache2
 
sudo systemctl restart apache2
 
sudo systemctl reload apache2
 
sudo systemctl disable apache2
 
sudo systemctl enable apache2
 
5. PASO CONFIGURAR HOSTS VIRTUALES

$ sudo mkdir /var/www/your_domain
$ sudo chown -R $USER:$USER /var/www/your_domain
$ sudo chmod -R 755 /var/www/your_domain
$ sudo nano /var/www/your_domain/index.html

$ sudo nano /etc/apache2/sites-available/your_domain.conf

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName your_domain
    ServerAlias www.your_domain
    DocumentRoot /var/www/your_domain
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

$ sudo a2ensite your_domain.conf  // Habilitaremos el archivo
$ sudo a2dissite 000-default.conf // Deshabilitamos el archivo por defecto.
$ sudo systemctl restart apache2


***************************************************************
COMO INSTALAR LINUX APACHE MYSQL Y PHP EN UBUNTU 20.04
***************************************************************
https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04-es

1. PASO INSTALAR APACHE
$ sudo apt update  // actualizar la librerías locales
$ sudo apt install apache2 // instalar apache
$ sudo ufw app list // listar el firewall
$ sudo ufw allow in "Apache"  // permitir el tráfico sólo con Apache
sudo ufw status // comprobar el firewall
http://your_server_ip // comprobamos que lo hemos instalado correctamente.

2. PASO Averiguar la dirección IP pública de sus servidor
$ ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'

3. PASO INSTALAR MYSQL.

$ sudo apt install mysql-server
$ sudo mysql_secure_installation


Se le preguntará si desea configurar el VALIDATE PASSWORD PLUGIN.
Nota: La habilitación de esta característica queda a discreción del usuario. Si se habilita, MySQL rechazará con un mensaje de error las contraseñas que no coincidan con los criterios especificados. Dejar la validación desactivada será una opción segura, pero siempre deberá utilizar contraseñas seguras y únicas para credenciales de bases de datos.

$ sudo mysql
// Que creamos Usuarios para la base de datos accedemos de la siguiente manera:

$ mysql -u user -p bbdd
$ introducimos la contraseña del usuario.

$ mysql> exit // para salir de la base de datos.

4. PASO INSTALAR PHP.

$ sudo apt install php libapache2-mod-php php-mysql

Posibles librerías a instalar de php:
curl pdo_mysql mbstring mysqli gd2

5. PASO  CREAR UN HOST VIRTUAL PARA SU SITIO WEB

$ sudo mkdir /var/www/your_domain
$ sudo chown -R $USER:$USER /var/www/your_domain
$ sudo nano /etc/apache2/sites-available/your_domain.conf

<VirtualHost *:80>
    ServerName your_domain
    ServerAlias www.your_domain
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/your_domain
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

$ sudo a2ensite your_domain
$ sudo a2dissite 000-default
$ sudo apache2ctl configtest
$ sudo systemctl reload apache2
$ nano /var/www/your_domain/index.html
$ sudo systemctl reload apache2

// COMPROBAR BASE DE DATOS

$ nano /var/www/your_domain/todo_list.php
/var/www/your_domain/todo_list.php
<?php
$user = "example_user";
$password = "password";
$database = "example_database";
$table = "todo_list";

try {
  $db = new PDO("mysql:host=localhost;dbname=$database", $user, $password);
  echo "<h2>TODO</h2><ol>";
  foreach($db->query("SELECT content FROM $table") as $row) {
    echo "<li>" . $row['content'] . "</li>";
  }
  echo "</ol>";
} catch (PDOException $e) {
    print "Error!: " . $e->getMessage() . "<br/>";
    die();
}






****************************************
INSTALAR DRUSH
****************************************

https://www.linode.com/docs/guides/how-to-install-drush-on-ubuntu-18-04/

Necesitamos tener instalado git

Move the composer.phar file to /usr/local/bin/, so that it can be accessed from any directory:

$ sudo mv composer.phar /usr/local/bin/composer

Composer has a few PHP dependencies it needs in order to run. Install them on your Ubuntu system:

$ sudo apt-get install php-xml, zip

Crear un enlace simbolico en directorio local de Composer, /usr/local/bin/composer, and the system’s bin directory, /usr/bin/:

$ sudo ln -s /usr/local/bin/composer /usr/bin/composer

A través de git clonamos el Drush en el directorio,  /usr/local/src/drush:

$ sudo git clone https://github.com/drush-ops/drush.git /usr/local/src/drush

Cambiamos el directori de trabajo a un nuevo directori Drush:

    cd /usr/local/src/drush
    
***Importante: a traves de git cambiamos de version por ejemplo a la Druhs 8.4.8 o Drush 9.1.0 ya para Drupal la 10 no funciona.

$ sudo git checkout 8.4.2

Crear un enlace simbólico entre el directorio de Drush /usr/local/src a /usr/bin

$ sudo ln -s /usr/local/src/drush/drush /usr/bin/drush

Ahora corremos el Composer install:

$ sudo composer install

# Si nos da error la instalación del drush con el composer:
$ sudo apt-get update
$ sudo apt install php-xml
$ sudo apt-get install php-mbstring

Comprobamos que todo funciona correctamente:

Drush --version

*************************************
   Instalar drupal con composer
*************************************
https://www.drupal.org/docs/develop/using-composer/starting-a-site-using-drupal-composer-project-templates

# instalar antes varias librerias:
$ sudo apt-get install php-curl
$ sudo apt-get install php-gd
$ sudo nano /etc/php/7.4/apache2/php.ini
// extensiones ext-dom  y phpxml
sudo apt-get update
sudo apt install php-xml
sudo apt-get install php-mbstring

opcache.enable=1

# instalar una versión en concreto:
$ composer create-project 'drupal/recommended-project:^8.9' drupal8 --stability dev --no-interaction

# instalar ultima versión de un drupal
$ composer create-project drupal-composer/drupal-project:8.x-dev nombre-del-proyecto —stability dev —no-interaction


**********************************
comandos linux-ubuntu
**********************************

rmdir /mi-directorio
rm -rfv /mi-directorio
history | grep ffmpeg   // buscar un comando utilizado en la terminal
history | grep mysqldump





**********************************
	ftp
**********************************
documentación: https://goto-linux.com/es/2019/10/30/como-configurar-el-servidor-ftp-en-ubuntu-20.04-focal-fossa-linux/

archivo de configuración: /etc/vsftpd.conf
sudo systemctl restart vsftpd

Mas información: https://www.hostinger.es/tutoriales/como-configurar-servidor-ftp-en-ubuntu-vps/#Paso-3-8211-Crear-el-directorio-de-usuarios




***********************************
          ssh
***********************************

sudo apt install ssh
// configuramos el ssh del servidor
sudo nano /etc/ssh/sshd_config




**********************************************
              Enlaces simbólicos
**********************************************

Los tengo en la carpeta /home/david/proyectos/

ln -s /home/david/proyectos/CEJ/prueba /var/www/html/prueba

ln -s /home/david/proyectos/DRUPAL/demo /var/www/html/demo



***********************************************
             Activar Debug Twig
***********************************************

ACTIVAR MODO DESARROLLO DE DRUPAL EN LOCAL. https://www.drupal.org/docs/8/theming/twig/debugging-twig-templates

Activar el archivo setting.local.php

Renombrar /sites/settings.example.local.php -> /sites/default/settings.local.php 

# Descomentar la siguiente linea en el archivo settings.php:

 # if (file_exists(__DIR__ . ‘/settings.local.php’)) {
 # include __DIR__ . ‘/settings.local.php’;
 # }


DESHABILITAR LA CACHE
# Cambia las siguientes líneas en  'settings.local.php' asignándo su valor a TRUE

$config['system.performance']['css']['preprocess'] = FALSE;

$config['system.performance']['js']['preprocess'] = FALSE;


En el archivo sites/default/settings.local.php file, descomentar las siguientes líneas. 

$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';
 
$settings['cache']['bins']['render'] = 'cache.backend.null';

$settings['cache']['bins']['dynamic_page_cache'] = 'cache.backend.null';

Deshabilitar el Cache de Twig y activar el Twig Debugging

Tenemos que habilitar para en sites/default/services.yml Si no exite services.yml copiamos el default.services.yml lo renombramos a services.yml Cambiar dentro de services.yml los siguientes parámetros: 
parameters: twig.config: 
debug: true 
auto_reload: true 
cache: false

# Observaciones: si nos aparecen mensaje de notice y warnings al habilitar el archivo settings.local.php, lo podemos deshabilitar en la siguiente linea:

$config['system.logging']['error_level'] = 'verbose';

comentamos la linea y se quitan los mensajes.


***************************************
COMANDOS DRUSH
****************************************

//COMANDOS GENERALES
$ drush cr                 			para limpiar caché
$ drush en [módulo]        			para artivar un módulo
$ drush en muprespa_pruebas			ejemplo de activación de módulos.
$ drush pm-uninstall [módulo]			para desinstalar un módulo.
$ drush pm-uninstall muprespa_pruebas		ejemplo de desinstalación de módulos.

//MÓDULOS
drush
$ drush en [module] Ejemplo: drush en migrate_upgrade -> instalar módulo
$ drush dl [module] -> descargar módulo
$ drush pml -> LISTAR MÓDULOS
$ drush pmu [module] -> desinstalar
$ drush dis -> DESHABILITAR MÓDULO
$ drush en -> HABILITAR MÓDULO

//MIGRACIÓN

$ drush migrate-import bz_usuarios
$ drush migrate-import bz_productos --update
$ drush ms -> listar todas la migraciones

// ACTUALIZAR DRUPAL CON DRUSH
https://www.carloscarrascal.com/blog/actualizar-drupal-con-drush-desde-la-linea-de-comandos
$ drush up drupal

*******************************************
	URLs limpias para Drupal 8
*******************************************

# activamos el módulo rewrite
$ cd /etc/apache2
$ sudo a2enmod rewrite
$ sudo systemctl restart apache2

# vamos a la configuración de apache2

$ sudo nano apache2.conf
y se agrega al final del archivo el siguiente código:
<Directory /var/www/html/NombreProyectoDrupal>
RewriteEngine on
AllowOverride All
Options FollowSymlinks
</Directory>

$ sudo systemctl restart apache2


********************************
	Gestión mysql
********************************

# CREAR UN NUEVO USUARIO

CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';

FLUSH PRIVILEGES;


# OTORGAR PERMISOS DE USUARIO

ALL PRIVILEGES: Como vimos antes, esto le otorgaría a un usuario de MySQL acceso completo a una base de datos designada (o si no se selecciona ninguna base de datos, acceso global a todo el sistema).
CREATE: Permite crear nuevas tablas o bases de datos.
DROP: Permite eliminar tablas o bases de datos.
DELETE: Permite eliminar filas de las tablas.
INSERT: Permite insertar filas en las tablas.
SELECT: Les permite usar el comando SELECT para leer las bases de datos.
UPDATE: Permite actualizar las filas de las tablas.
GRANT OPTION: Permite otorgar o eliminar privilegios de otros usuarios.

# permisos a nivel de base de datos y de tablas
GRANT type_of_permission ON database_name.table_name TO 'username'@'localhost';

# revocar permisos a un usuario

SHOW GRANTS FOR 'username'@'localhost';

# Eliminar un usuario completo

DROP USER 'username'@'localhost';

# VER USUARIOS Y PERMISOS 

SELECT User, Host FROM mysql.user

Para listar los permisos podemos utilizar el comando:

SHOW GRANTS;
SHOW GRANTS FOR 'Usuario';



# IMPORTAR BBDD

mysql -u username -p new_database < data-dump.sql
Ejemplo: mysql -u boulderzvo -p boulderpruebas < boulderzvo.sql




# EXPORTAR

mysqldump -u username -p database_name > data-dump.sql

****************************************
	virtualhost ubuntu
****************************************
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-18-04-quickstart-es

1. Crear la estructura de directorios

$ sudo mkdir -p /var/www/example.com/public_html
$ sudo mkdir -p /var/www/test.com/public_html

2. Conceder permisos

$ sudo chown -R $USER:$USER /var/www/example.com/public_html
$ sudo chown -R $USER:$USER /var/www/test.com/public_html
$ sudo chmod -R 755 /var/www


3. Crear páginas de demostración para cada host virtual

$ nano /var/www/example.com/public_html/index.html


4. Crear nuevos archivos de host virtual

$ sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf

$ sudo nano /etc/apache2/sites-available/example.com.conf

<VirtualHost *:80>
    ServerAdmin admin@example.com
    ServerName example.com
    ServerAlias www.example.com
    DocumentRoot /var/www/example.com/public_html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

# Resuelve el problema que carga la primera página pero los enlaces no.
# Ejemplo para que funcione con el rewritte:

<VirtualHost *:80>
    ServerAdmin admin@bzalcala.local
    ServerName bzalcala.local
    ServerAlias www.bzalcala.local
    DocumentRoot /var/www/bzalcala.local/public_html/bzalcala/

    <Directory /var/www/bzalcala.local/public_html/bzalcala >
        Options Indexes FollowSymLinks
        AllowOverride all
        Require all granted 
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>


5. Habilitar los nuevos archivos de Host Virtual.

$ sudo a2ensite example.com.conf
$ sudo a2ensite test.com.conf

Deshabilitar es que viene por defecto

$ sudo a2dissite 000-default.conf

Restauramos el apache

$ sudo systemctl restart apache2

6. Configurar el archivo de hosts locales 
*******host**************
$ sudo nano /etc/hosts

127.0.0.1   localhost
127.0.1.1   guest-desktop
your_server_IP example.com
your_server_IP test.com

Restauramos el apache

$ sudo systemctl restart apache2

******** host drupal *************
Para que funcione correctamente el host en el drupal 
tenemos que ir al setting.php

$settings['trusted_host_patterns'] = array(
  '^yourdomain\.com$',
  '^.+\.yourdomain\.com$',
  '^yourdomain\.org',
  '^.+\.yourdomain\.org',
);

 $settings['trusted_host_patterns'] = array(
   'boulderzone\.com$',
   'boulderzone\.local$',
 );


**********************************
permisos para un sitio drupal8
*********************************

$ sudo chown www-data -R /var/www/html/drupal8commerce/
$ sudo chgrp www-data /var/www/html/drupal8commerce/
$ sudo chmod ug+w /var/www/html/drupal8commerce/
$ sudo chmod g+s /var/www/html/drupal8commerce/
$ sudo usermod -a -G www-data jyc
$ sudo setfacl -d -m g::rwx -R /var/www/html/drupal8commerce/


************************************
     CÓDIGO PARA CSS
************************************
https://gist.github.com/mrwweb/5627502

"Sanity-ize" REMs by setting them to 10px-baseline aka "Tiny Happy Pixels Dancing." 


/* this is the "root" in "root em." */
html {
  font-size: 62.5%; /* Now 10px = 1rem! */
}

body {
  font-size: 16px; /* px fallback */
  font-size: 1.6rem; /* default font-size for document */
  line-height: 1.5; /* a nice line-height */
}

/* for everything else, rem = px/10 */
footer {
  font-size: 13px;
  font-size: 1.3rem;
}

/* you can safely nest rems, it's still 1rem = 10px */
footer small {
  font-size: 10px;
  font-size: 1rem;
}

* { Box-sizing: Border-box } FTW

// hace que aunque metas padding no crezca el elemento.

https://www.paulirish.com/2012/box-sizing-border-box-ftw/	

/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}

IMPORTAR BASE DE DATOS MYSQL EN XAMP, LARAGON WINDOWS

c:\Users\drm107h> cd c:\xampp\mysql\bin
c:\xampp\mysql\bin
Iniciamos la consolo de mysql, para ello tenemos que introducir el comando mysql y tambien el usuario y la contraseña.
c:\xampp\mysql\bin>mysql -u root -p  
Nos pide la confirmación del password.
la confirmamos y ya estamos dentro de la consola de Mysql.

XAMPP
Abre la consola con el comando «cmd» y sitúate en la carpeta bin en el directorio de instalación de MySQL, si tienes XAMPP lo tienes en:
C:\xampp\mysql\bin
En esta carpeta tienes todas las utilidades, utilizaremos mysql.exe y ejecutaremos el siguiente comando:
mysql -h localhost -u root nombrebd < C:\rutadel.sql

LARAGON
SOURCE C:/laragon/www/demo/gestion/bbdd/boulderzsjgs2016.sql

C:\laragon\bin\mysql\mysql-8.0.30-winx64\bin
$mysql -h localhost -u root cgtaltenfxdrm01 < E:\PROYECTOS\drupalcgt\bbdd\cgtaltenfxdrm01.sql






